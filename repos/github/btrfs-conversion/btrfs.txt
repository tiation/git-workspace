Here's your refined, exact, and tailored step-by-step guide for converting your **current Pop!_OS 22.04 install** (on your NVMe drive) from **EXT4** (with LUKS encryption) to **BTRFS** (also with encryption, subvolumes, compression, and Timeshift integration):

---

## 🚀 **Conversion Overview (Your Specific Setup):**

- **Disk:** `/dev/nvme0n1`
  - EFI Partition (`/boot/efi`): `/dev/nvme0n1p1`
  - Recovery Partition (`/recovery`): `/dev/nvme0n1p2`
  - Encrypted Root (`/`): `/dev/nvme0n1p3`
  - Encrypted Swap: `/dev/nvme0n1p4` (`cryptswap`)
- **Backup Disk:** `/dev/sdb2_crypt` (Timeshift backups)

---

## ✅ **Step-by-Step Instructions (Your exact setup)**

**IMPORTANT:** Always have a recent backup (your Timeshift snapshots on `/dev/sdb2_crypt`) and a Pop!_OS or Ubuntu Live USB ≥22.04 ready.

---

### ⚙️ **Step 1: Boot Live USB**

Boot from your **Pop!_OS or Ubuntu live USB** (≥22.04).

---

### 🔐 **Step 2: Unlock and Check Filesystem**

In the live USB terminal:

```bash
sudo cryptsetup luksOpen /dev/nvme0n1p3 cryptdata
sudo fsck -f /dev/mapper/cryptdata
```

---

### 🔄 **Step 3: Convert EXT4 to BTRFS**

```bash
sudo btrfs-convert /dev/mapper/cryptdata
```

---

### 📂 **Step 4: Mount and Create BTRFS Subvolumes**

```bash
sudo mount /dev/mapper/cryptdata /mnt
sudo btrfs subvolume create /mnt/@
sudo btrfs subvolume create /mnt/@home
sudo btrfs subvolume create /mnt/@snapshots
```

---

### 🔃 **Step 5: Move Data to New Subvolumes**

Move everything into `@` except the subvolumes:

```bash
cd /mnt
sudo mv !( @ | @home | @snapshots ) @/
sudo mv @/home/* @home/
```

Check contents:

```bash
ls /mnt
ls /mnt/@home
```

Unmount briefly:

```bash
cd /
sudo umount /mnt
```

---

### 🚧 **Step 6: Remount with Correct Options**

```bash
sudo mount -o subvol=@,compress=zstd:1,discard=async /dev/mapper/cryptdata /mnt
sudo mkdir -p /mnt/{boot/efi,recovery,home}
sudo mount -o subvol=@home,compress=zstd:1,discard=async /dev/mapper/cryptdata /mnt/home
sudo mount /dev/nvme0n1p1 /mnt/boot/efi
sudo mount /dev/nvme0n1p2 /mnt/recovery
```

---

### 📝 **Step 7: Update `/etc/fstab`**

```bash
sudo blkid /dev/mapper/cryptdata
```

Edit file:

```bash
sudo nano /mnt/etc/fstab
```

Update entries:

```
UUID=<UUID-of-cryptdata> /      btrfs defaults,subvol=@,compress=zstd:1,discard=async 0 0
UUID=<UUID-of-cryptdata> /home  btrfs defaults,subvol=@home,compress=zstd:1,discard=async 0 0
```

Keep EFI (`nvme0n1p1`), Recovery (`nvme0n1p2`), and cryptswap unchanged.

---

### 🔐 **Step 8: Update `/etc/crypttab`**

Add `discard` to crypttab entry:

```bash
sudo nano /mnt/etc/crypttab
```

Example entry:

```
cryptdata UUID=<UUID-of-nvme0n1p3> none luks,discard
cryptswap UUID=<UUID-of-nvme0n1p4> /dev/urandom swap,plain,offset=1024,cipher=aes-xts-plain64,size=512
```

(Get UUIDs using `sudo blkid /dev/nvme0n1p3` and `/dev/nvme0n1p4`.)

---

### 🖥️ **Step 9: Update `kernelstub` Configuration**

Edit `kernelstub` configuration:

```bash
sudo nano /mnt/etc/kernelstub/configuration
```

Add `"rootflags=subvol=@"`:

```json
"user": {
  "kernel_options": [
    "quiet",
    "loglevel=0",
    "systemd.show_status=false",
    "splash",
    "rootflags=subvol=@"
  ]
}
```

**Ensure comma after `"splash"`!**

---

### ⚙️ **Step 10: Update systemd boot entry**

Edit loader entry:

```bash
sudo nano /mnt/boot/efi/loader/entries/Pop_OS-current.conf
```

Modify `options` line:

```
options root=UUID=<UUID-of-cryptdata> ro quiet loglevel=0 systemd.show_status=false splash rootflags=subvol=@
```

Optional timeout:

```bash
echo "timeout 3" | sudo tee -a /mnt/boot/efi/loader/loader.conf
```

---

### 🖥️ **Step 11: Chroot and update initramfs**

Chroot into the new system:

```bash
for i in /dev /dev/pts /proc /sys /run; do sudo mount -B $i /mnt$i; done
sudo chroot /mnt
update-initramfs -c -k all
exit
```

Unmount cleanly:

```bash
sudo umount -R /mnt
sudo cryptsetup luksClose cryptdata
```

---

### 🚦 **Step 12: Reboot into Pop!_OS**

- Remove USB.
- Reboot normally.
- Enter LUKS password when prompted.

---

### ✅ **Step 13: Verify New Setup**

```bash
sudo mount -av
sudo mount | grep btrfs
sudo swapon
sudo btrfs filesystem show /
sudo btrfs subvolume list /
```

Enable regular SSD trim:

```bash
sudo systemctl enable fstrim.timer
```

Verify trimming enabled (`issue_discards`):

```bash
grep issue_discards /etc/lvm/lvm.conf
# should say "issue_discards = 1"
```

---

### ⏱️ **Step 14: Configure Timeshift for BTRFS**

Open Timeshift GUI or CLI:

```bash
sudo timeshift-launcher
```

- Select **BTRFS** mode.
- Snapshot location: `/run/timeshift/backup` (@snapshots).

Enable auto-snapshots:

```bash
sudo timeshift --schedule
```

Create snapshot manually:

```bash
sudo timeshift --create --comments "Post-conversion setup verified"
```

---

### 🚀 **Step 15: System Updates & Final Reboot**

```bash
sudo apt update && sudo apt upgrade -y
sudo apt dist-upgrade -y
sudo apt autoremove -y && sudo apt autoclean
flatpak update -y
```

Reboot once more.

---

🎉 **DONE:** You now have your **Pop!_OS 22.04** running on **encrypted BTRFS** with optimized subvolumes, compression, automated snapshots, and full SSD/NVMe support, exactly tailored to your drive configuration!
